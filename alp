#!/bin/sh

set -e

ARCH=${ARCH:-x86_64}
APK_MIRROR=${APK_MIRROR:-http://dl-cdn.alpinelinux.org/alpine/latest-stable/main}
APK_TOOLS_VER=${APK_TOOLS_VER:-2.10.3-r1}

usage()
{
    cat <<EOF
usage: alp [-C root] <command> [<args>]

Create and manage Alpine Linux roots, alps.

  alp init [package(s)]

    Create a new alp and install the specified packages. If no
    packages are specified, alpine-base is installed.

    The following host paths are made available to the alp. To change
    these, modify <root>/.alp/bindings.
      - /etc/resolv.conf
      - /proc
      - /sys


  alp exec [<proot-options>] [<program> [<args>]]

    Execute program in alp. Accepts any options recognized by
    proot(1), e.g. -0 to emulate the superuser. If no program is
    specified, /bin/sh is launched.


  alp pack

    Package up an alp as a Squash filesystem which can be used to boot
    a virtual instance under QEMU (see alp boot).


  alp boot

    Run packaged alp as a virtual machine under QEMU.


  alp help

    Show this message.

EOF
}

##
# utils

alp_root_set() {
    alp_root=${1}
    alp_work=${alp_root}/.alp
}

alp_assert() {
    [ -d ${alp_work} ] && return 0

    echo "${alp_root} is not an alp root."
    exit 1
}


##
# alp exec

alp_exec()
{
    proot -r ${alp_root} -w / $(cat ${alp_work}/bindings | sed -e 's/^/-b /g') \
	  $@
}

##
# alp boot

alp_boot()
{
    qemu-system-x86_64 -m 256M -M pc -nographic \
       -kernel ${alp_root}/boot/vmlinuz-virt -append "console=ttyS0 quiet" \
       -initrd ${alp_work}/initramfs \
       -hda ${alp_work}/rootfs.squashfs
}

##
# alp pack

alp_pack()
{
    alp_exec -0 sh /.alp/boot-prep.sh

    mksquashfs ${alp_root} ${alp_work}/rootfs.squashfs \
       -all-root -noappend \
       -ef ${alp_work}/exclude -pf ${alp_work}/pseudo
}

##
# alp init

alp_init_work()
{
    mkdir -p ${alp_work}

    if [ ! -f ${alp_work}/apk.static ]; then
	wget -q -O - ${APK_MIRROR}/${ARCH}/apk-tools-static-${APK_TOOLS_VER}.apk | \
	    tar xOz sbin/apk.static >${alp_work}/apk.static

	chmod +x ${alp_work}/apk.static
    fi

    [ -f ${alp_work}/bindings ] || cat <<EOF >${alp_work}/bindings
/proc
/sys
/etc/resolv.conf
EOF

    [ -f ${alp_work}/exclude ] || cat <<EOF >${alp_work}/exclude
.alp
boot
EOF

    [ -f ${alp_work}/pseudo ] || cat <<EOF >${alp_work}/pseudo
proc d 444 root root
sys  d 444 root root
EOF

    [ -f ${alp_work}/boot-prep.sh ] || cat <<'EOF' >${alp_work}/boot-prep.sh
#!/bin/sh

set -x

apk -U add linux-virt util-linux

ln -s agetty /etc/init.d/agetty.ttyS0

rc-update add devfs        sysinit
rc-update add dmesg        sysinit
rc-update add mdev         sysinit
rc-update add hwclock      boot
rc-update add modules      boot
rc-update add sysctl       boot
rc-update add hostname     boot 
rc-update add bootmisc     boot
rc-update add syslog       boot 
rc-update add agetty.ttyS0 default

echo ttyS0 >/etc/securetty

mkinitfs -F "base scsi squashfs" \
    -i /.alp/initramfs-init \
    -o /.alp/initramfs \
    $(ls /lib/modules/ | head -n 1)

EOF

    [ -f ${alp_work}/initramfs-init ] || cat <<EOF >${alp_work}/initramfs-init
#!/bin/sh
busybox modprobe sd_mod
busybox modprobe squashfs
busybox mount -t devtmpfs devtmpfs /dev
busybox mount -t squashfs /dev/sda /newroot
busybox mount -t devtmpfs devtmpfs /newroot/dev
busybox mount -t tmpfs    tmpfs    /newroot/tmp
exec busybox switch_root /newroot /sbin/init
EOF

}

alp_init()
{
    local pkgs="${*:-alpine-base}"

    alp_init_work

    mkdir -p ${alp_root}/etc/apk
    echo ${APK_MIRROR} >${alp_root}/etc/apk/repositories

    alp_exec -0 /.alp/apk.static -U --allow-untrusted --initdb add ${pkgs}
}


alp_root_set .

# Global options
while getopts "C:" opt; do
    case ${opt} in
	C)
	    alp_root_set $OPTARG
	    ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -lt 1 ]; then
    usage && exit 1
fi

cmd=${1}
shift

case ${cmd} in
    "help")
	usage && exit 0
	;;
    "init")
	alp_init "$@"
	;;
    "pack")
	alp_assert
	alp_pack "$@"
	;;
    "boot")
	alp_assert
	alp_boot "$@"
	;;
    "exec")
	alp_assert
	alp_exec "$@"
	;;

    *)
	usage && exit 1
esac
